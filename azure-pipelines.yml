trigger:
  branches:
    include:
      - master
  tags:
    include:
      - '*'
pr:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

stages:
  - stage: 'Wheel_Builds'
#    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
    jobs:
    - job: 'macos'
#      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
      pool: {vmImage: 'macOS-10.15'}
      variables:
        python.version: '3.7'
        CIBW_BEFORE_BUILD: pip install -U setuptools-rust && tools/install_rust.sh
        CIBW_SKIP: cp27-* cp34-* pp*
        TWINE_USERNAME: retworkx-ci
        CIBW_TEST_COMMAND: pushd tests && python -m unittest discover {project}/tests && popd
      steps:
      - task: UsePythonVersion@0
      - bash: |
          set -e
          python -m pip install --upgrade pip
          pip install cibuildwheel==1.2.0
          pip install -U twine
          cibuildwheel --output-dir wheelhouse .
      - task: PublishBuildArtifacts@1
        inputs: {pathtoPublish: 'wheelhouse'}
        condition: succeededOrFailed()
#      - bash: |
#          twine upload wheelhouse/*
#        env:
#          TWINE_PASSWORD: $(TWINE_PASSWORD)
    - job: 'Windows'
      pool: {vmImage: 'vs2017-win2016'}
#      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
      variables:
        CIBW_BEFORE_BUILD: ps .\tools\setup.ps1 && pip install -U setuptools-rust
        CIBW_SKIP: cp27-* cp34-* pp*
        TWINE_USERNAME: retworkx-ci
        CIBW_TEST_COMMAND: pushd tests && python -m unittest discover {project}/tests && popd
      steps:
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.5', architecture: x86}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.5', architecture: x64}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x86}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x86}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
        - script: choco install vcpython27 -f -y
          displayName: Install Visual C++ for Python 2.7
        - bash: |
            set -e
            python -m pip install --upgrade pip
            pip install cibuildwheel==1.2.0
            pip install -U twine
            cibuildwheel --output-dir wheelhouse
        - task: PublishBuildArtifacts@1
          inputs: {pathtoPublish: 'wheelhouse'}
          condition: succeededOrFailed()
#        - script: |
#            twine upload wheelhouse\*
#          env:
#            TWINE_PASSWORD: $(TWINE_PASSWORD)
  - stage: "Python_37_Tests"
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    jobs:
    - job: 'MacOS_Catalina_Tests'
      pool: {vmImage: 'macOS-10.15'}
      condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags'))
      strategy:
        matrix:
          Python37:
            python.version: '3.7'
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'
        - bash: rustup default nightly
          displayName: 'Install Rust'
        - bash: python -m pip install --upgrade pip setuptools virtualenv setuptools-rust
          displayName: 'Install dependencies'
        - bash: |
            pip install .
          displayName: 'Build retworkx'
        - bash: |
            set -e
            export PYTHONHASHSEED=$(python -S -c "import random; print(random.randint(1, 4294967295))")
            echo "PYTHONHASHSEED=$PYTHONHASHSEED"
            cd tests
            python -m unittest discover .
          displayName: 'Run tests'
    - job: 'Windows_Tests'
      pool: {vmImage: 'vs2017-win2016'}
      condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags'))
      strategy:
        matrix:
          Python37:
            python.version: '3.7'
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'
        - bash: rustup default nightly
          displayName: 'Install Rust'
        - bash: |
            set -e
            python -m pip install --upgrade pip setuptools virtualenv setuptools-rust
          displayName: 'Install dependencies'
        - bash: |
            pip install .
          displayName: 'Build retworkx'
        - bash: |
            set -e
            export PYTHONHASHSEED=$(python -S -c "import random; print(random.randint(1, 4294967295))")
            echo "PYTHONHASHSEED=$PYTHONHASHSEED"
            cd tests
            python -m unittest discover .
          displayName: 'Run tests'


  - stage: "All_Python_Tests"
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    jobs:
    - job: 'MacOS_Catalina_Tests'
      pool: {vmImage: 'macOS-10.15'}
      condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags'))
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
          Python35:
            python.version: '3.5'
          Python38:
            python.version: '3.8'
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'
        - bash: rustup default nightly
          displayName: 'Install Rust'
        - bash: python -m pip install --upgrade pip setuptools virtualenv setuptools-rust
          displayName: 'Install dependencies'
        - bash: |
            pip install .
          displayName: 'Build retworkx'
        - bash: |
            set -e
            export PYTHONHASHSEED=$(python -S -c "import random; print(random.randint(1, 4294967295))")
            echo "PYTHONHASHSEED=$PYTHONHASHSEED"
            cd tests
            python -m unittest discover .
          displayName: 'Run tests'
    - job: 'Windows_Tests'
      pool: {vmImage: 'vs2017-win2016'}
      condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags'))
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
          Python35:
            python.version: '3.5'
          Python38:
            python.version: '3.8'
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'
        - bash: rustup default nightly
          displayName: 'Install Rust'
        - bash: |
            set -e
            python -m pip install --upgrade pip setuptools virtualenv setuptools-rust
          displayName: 'Install dependencies'
        - bash: |
            pip install .
          displayName: 'Build retworkx'
        - bash: |
            set -e
            export PYTHONHASHSEED=$(python -S -c "import random; print(random.randint(1, 4294967295))")
            echo "PYTHONHASHSEED=$PYTHONHASHSEED"
            cd tests
            python -m unittest discover .
          displayName: 'Run tests'
